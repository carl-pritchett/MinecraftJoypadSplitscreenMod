buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'com.github.johnrengelman.shadow'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
//apply plugin: 'eclipse'


version = "1.13-2-25.0.50"
group = "com.shiny.joypadmod"
archivesBaseName = "JoypadMod"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.


allprojects {
        repositories {
            jcenter()
            maven { url "https://jitpack.io" }
        }
   }

minecraft {
    //version = "1.13-2-25.0.50"
    //runDir = "run"
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20180921-1.13'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run').canonicalPath

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
//            source sourceSets.main
//            mods {
//                joypadmod {
//                    source sourceSets.main
//                }
//            }
        }

        server {
            workingDirectory project.file('run').canonicalPath

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            source sourceSets.main
//            mods {
//                joypadmod {
//                    source sourceSets.main
//                }
//            }
        }
    }
}

configurations {
    //shade
    //compile.extendsFrom shade

    contained {
        transitive = false
    }

}

dependencies {
    minecraft 'net.minecraftforge:forge:1.13.2-25.0.50'
    //shade 'org.lwjgl.lwjgl:lwjgl:2.+'
    //compile  'org.lwjgl.lwjgl:lwjgl:2.+'
    compile 'org.lwjgl:lwjgl:3.1.6'
    //'org.lwjgl', name: 'lwjgl', version: '3.1.0'
	//shade 'com.github.strikerx3:jxinput:master-SNAPSHOT'
    //shade 'com.github.strikerx3:jxinput:0.8'
    compile  'com.github.strikerx3:jxinput:0.8'
    contained  'com.github.strikerx3:jxinput:0.8'
}

// TODO causes build fail - unknown attribute mapping
//shadowJar {
//    classifier = null
//    //classifier '' // Replace the default JAR
//    dependencies {
//        include dependency("org.lwjgl.lwjgl:lwjgl:2.+")
//        include dependency("com.github.strikerx3:jxinput:0.8")
//    }
//}
def libPrefix = 'META-INF/libraries'
jar {

    from(configurations.contained.files) {
        include '*'
        into 'META-INF/libraries'
    }

    manifest {
        attributes([
                'ContainedDeps': configurations.contained.files.collect { libPrefix + '/' + it.name + 'bad' }.join(' '),
                "Specification-Title": "JoypadMod",
                "Specification-Vendor": "JoypadMod",
                "Specification-Version": "1.13-2-25.0.50", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"JoypadMod",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    reobf {
        jar{}
    }

//    configurations.shade.each { dep ->
//        from(project.zipTree(dep)){
//            exclude 'META-INF', 'META-INF/**'
//        }
//    }
}

//shadowJar {
//    classifier = ""
//    dependencies {
//        include dependency("org.lwjgl.lwjgl:lwjgl:2.+")
//        include dependency("com.github.strikerx3:jxinput:0.8")
//    }
//
//}
//tasks.build.dependsOn shadowJar
//reobf { shadowJar { mappingType = "SEARGE" } }
//tasks.reobfShadowJar.mustRunAfter shadowJar
//
//reobf {
//
//    shadowJar {
//        //mappings = new File("/")
//    }
//}
//tasks.build.dependsOn reobfShadowJar
//tasks.build.dependsOn shadowJar

//reobf {
//    shadowJar{}
//}

//tasks.build.dependsOn reobfShadowJar
////tasks.reobfShadowJar.mustRunAfter shadowJar
////tasks.build.dependsOn sourceJar, shadowJar
//tasks.build.dependsOn reobfShadowJar
//reobfJar.dependsOn jar
//build.dependsOn shadowJar


processResources
{
    // this will ensure that this task is redone when the versions change.
//    inputs.property "version", project.version
//    inputs.property "mcversion", project.minecraft.version
    inputs.property 'version', project.version
    inputs.property 'mcversion', '1.13.2'
//    // replace stuff in mcmod.info, nothing else
//    from(sourceSets.main.resources.srcDirs) {
//        include 'mcmod.info'
//
//        // replace version and mcversion
//        expand 'version':project.version, 'mcversion':project.minecraft.version
//    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

//sourceSets {
//    main.compileClasspath += configurations.shade
//    main.runtimeClasspath += configurations.shade
//}




